name: Deploy OCPP Server to ECS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: Set up QEMU for arm64
      #   run: |
      #     docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        # if: runner.os == 'Linux'

      # - name: Set up Docker for arm64
      #   uses: docker/setup-qemu-action@v2
      #   with:
      #     platforms: linux/arm64

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=${{ secrets.ECR_REPOSITORY_URL }}" >> $GITHUB_ENV
          echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER }}" >> $GITHUB_ENV
          echo "ECS_SERVICE=${{ secrets.ECS_SERVICE }}" >> $GITHUB_ENV

      - name: Download env file from S3
        run: aws s3 cp s3://charging-prod-envs/ocpp.env .env

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URL }}:latest --push .

    #   - name: Deploy to ECS
    #     run: |
    #       aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
